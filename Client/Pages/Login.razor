@page "/login"
@layout NoHeaderLayout
@using Flic.Client.Services
@using Flic.Shared
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<style>
 
/* Container */
.login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    /*background: linear-gradient(135deg, #1E88E5, #1565C0);*/
    color: #fff;
}

.login-card {
    background: #fff;
    color: #333;
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 10px 20px rgba(0,0,0,0.3);
    width: 100%;
    max-width: 400px;
    text-align: center;
    animation: fadeIn 0.5s ease-in-out;
}


/* Form styling */
.login-form {
    text-align: left;
    margin-top: 20px;
}

.login-form label {
    margin-bottom: 5px;
    font-weight: 600;
    color: #444;
}

.login-form input {
    width: 100%;
    padding: 12px 15px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 10px;
    box-sizing: border-box;
    transition: border-color 0.3s;
}

.login-form input:focus {
    border-color: #1E88E5;
    outline: none;
    box-shadow: 0 0 5px rgba(30, 136, 229, 0.5);
}

/* Submit button */
.login-btn {
    background: linear-gradient(135deg, #43A047, #388E3C);
    color: #fff;
    border: none;
    padding: 12px;
    width: 100%;
    border-radius: 10px;
    font-size: 1.1em;
    cursor: pointer;
    transition: background 0.3s;
    margin-top: 10px;
}

.login-btn:hover {
    background: linear-gradient(135deg, #388E3C, #2E7D32);
}

/* Error message */
.alert {
    margin-bottom: 20px;
    padding: 15px;
    color: #fff;
    border-radius: 10px;
    background-color: #e53935;
    animation: shake 0.5s;
}

/* Ẩn nút khi loading */
.login-btn.loading {
    background: #888;
    cursor: not-allowed;
}


</style>

<div class="login-container">
    <div class="login-card">
    

        <!-- Tiêu đề -->
        <h2 style="margin-bottom: 20px;">Đăng Nhập FLIC-VYA</h2>

        <!-- Hiển thị lỗi -->
        @if (ShowErrors)
        {
            <div class="alert">
                <p>@Error</p>
            </div>
        }

        <!-- Form đăng nhập -->
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="login-form">
                <!-- Tên đăng nhập -->
                <label for="username">👤 Tên đăng nhập:</label>
                <InputText Id="username" Class="form-control" @bind-Value="loginModel.Username" placeholder="Nhập tên đăng nhập" />
                <ValidationMessage For="@(() => loginModel.Username)" />

                <!-- Mật khẩu -->
                <label for="password">🔑 Mật khẩu:</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" placeholder="Nhập mật khẩu" />
                <ValidationMessage For="@(() => loginModel.Password)" />
                <!-- Nút đăng nhập -->
                <button type="submit" class="login-btn" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Đang xử lý...</span>
                    }
                    else
                    {
                        <span>Đăng Nhập</span>
                    }
                </button>                
            </div>
        </EditForm>

        <!-- Liên kết hỗ trợ -->
        <div style="margin-top: 15px;">
            <a href="/forgot-password" style="color: #1E88E5; text-decoration: none;">🔍 Quên mật khẩu?</a>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string returnUrl { get; set; }
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";
    bool success = true;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        ShowErrors = false;
        isLoading = true;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/flic");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }

        isLoading = false;
    }

    private async Task Close()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task CloseAlert()
    {
        ShowErrors = false;
    }

}