@page "/ArticleDetail/{Id:int}"
@using Flic.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <NotAuthorized>
        <span>You're not authorize</span>
    </NotAuthorized>
    <Authorized Context="Auth">
        <div class="row">
            <div style="width:95%; margin: 0 auto;">
                <div>
                    <a href="/ArticleDetail/@item.Id">
                        @((MarkupString)item.Title)
                    </a>

                </div>
                <div>
                    @((MarkupString)item.ArticleContent)
                </div>
            </div>
            <hr />
            <span>Tin cũ hơn</span>
            <ul>
                @for (int i = 0; i < list.Count; i++)
                {
                    var it = @list[i];
                    if (it.Id != item.Id)
                    {
                        <li>
                            <a href="/ArticleDetail/@it.Id" @onclick="@(()=>OnLinkClick(@it.Id))" @onclick:preventDefault>@((MarkupString)it.Title)</a>
                        </li>
                    }else
                    {
                        <li>
                            @((MarkupString)it.Title)
                        </li>
                    }
                    
                }
            </ul>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    [Parameter]
    public int Id { get; set; }
    Article item = new Article();
    List<Article> list = new List<Article>();


    string htmlValue = "";
    
    List<Section> SectionList = new List<Section>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            /// Lấy danh sách các tin
            var response = await Http.GetAsync("api/Article/ArticleGetList");
            response.EnsureSuccessStatusCode();
            if (response.IsSuccessStatusCode)
            {
                list = await response.Content.ReadFromJsonAsync<List<Article>>();

                //await JsRuntime.InvokeVoidAsync("alert", "Error: " + list.Count);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error: " + response.StatusCode + " " + response.Content.ToString());
            }
            ///
            response = await Http.GetAsync("api/Article/ArticleGetByID/" + Id);
            if (response.IsSuccessStatusCode)
            {
                item = await response.Content.ReadFromJsonAsync<Article>();
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error: " + response.StatusCode + " " + response.Content.ToString());
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    
    protected async Task OnLinkClick(int id)
    {        
        InvokeAsync(async () => { Id = id;  item =  await Http.GetFromJsonAsync<Article>("api/Article/ArticleGetByID/" + Id.ToString()); StateHasChanged(); });
        
    }
}
